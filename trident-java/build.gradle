plugins {
    id 'java-library'
}

ext {
    bouncycastleVersion = '1.69'
    junitJupiterVersion = '5.4.2'
}

allprojects {
    version '0.9.0'
    group = 'org.tron.trident'

    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'

    java {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    dependencies {
        testImplementation "org.junit.jupiter:junit-jupiter:$junitJupiterVersion"
    }

    test {
        useJUnitPlatform()
        testLogging {
            events 'passed', 'skipped', 'failed'
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    javadoc {
        options.addStringOption('Xdoclint:none', '-quiet')
        failOnError = false
    }

    task wrapper(type: Wrapper) {
        gradleVersion = '6.6.1'
    }

    artifacts {
        archives jar
        archives sourcesJar
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java

                artifact sourcesJar
                artifact javadocJar

                pom {
                    name = project.name
                    description = 'Trident Project'
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                }
            }
        }

        repositories {
            maven {
                def isSnapshot = version.endsWith('SNAPSHOT')
                url = isSnapshot ?
                        findProperty('mavenSnapshotsUrl') :
                        findProperty('mavenReleasesUrl')

                credentials {
                    username = findProperty('nexusUsername') ?: System.getenv('NEXUS_USERNAME')
                    password = findProperty('nexusPassword') ?: System.getenv('NEXUS_PASSWORD')
                }
            }
        }
    }
}

